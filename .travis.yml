os: linux
dist: bionic
language: shell
group: travis_latest

addons:
  apt:
    packages:
      - jq

env:
  global:
    - DOCKER_CLI_EXPERIMENTAL=enabled
    - DOCKER_BUILDKIT=1

stages:
  - lint
  - Build base
  - build
  - scan

.template:
  - &build
    stage: build
    env: TARGETS=all
    script:
      # update docker for buildx
      - mkdir -p /etc/docker/
      - |
        echo -e '{"experimental": true}' | sudo tee /etc/docker/daemon.json
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      - sudo add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      - sudo apt-get install -qy docker-ce
      # log into Docker HUB
      - echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
      # enable multiarch
      - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      # create builder for buildx
      - docker buildx create --use --name build --node build --driver-opt network=host
      - cd "$IMAGE"
      - if [[ $TRAVIS_PULL_REQUEST == false && $TRAVIS_BRANCH == master ]]; then
          if [[ -z ${TARGETS:-} ]]; then
            make;
          else
            for target in $TARGETS; do
              make $target;
            done;
          fi;
        else
          sudo docker build .;
        fi
      - docker images

jobs:
  allow_failures:
    - stage: scan

  include:
    - stage: lint
      # install:
        # - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash"
      script:
        # - fossa init
        - make hadolint
        - make shellcheck
      # after_script:
      #   - fossa test

    - <<: *build
      stage: Build base
      env: IMAGE=base-alpine TARGETS="all edge"

    - <<: *build
      env: IMAGE=aports
    - <<: *build
      env: IMAGE=archisteamfarm
    - <<: *build
      env: IMAGE=base-travis TARGETS="xenial bionic"
    - <<: *build
      env: IMAGE=c3d2-bullshit-bingo
    - <<: *build
      env: IMAGE=code-server
    - <<: *build
      env: IMAGE=code-server-extra
    - <<: *build
      env: IMAGE=firefly-iii
    - <<: *build
      env: IMAGE=halcyon
    - <<: *build
      env: IMAGE=healthchecks
    - <<: *build
      env: IMAGE=images-weserv
    - <<: *build
      env: IMAGE=iodine
    - <<: *build
      env: IMAGE=kibitzr
    - <<: *build
      env: IMAGE=magic-wormhole-mailbox-server
    - <<: *build
      env: IMAGE=magic-wormhole-transit-relay
    - <<: *build
      env: IMAGE=mastodon-nginx
    - <<: *build
      env: IMAGE=musicbot
    - <<: *build
      env: IMAGE=musicbrainz
    - <<: *build
      env: IMAGE=musicbrainz-postgres
    - <<: *build
      env: IMAGE=open-web-calendar
    - <<: *build
      env: IMAGE=prerenderer
    - <<: *build
      env: IMAGE=privatebin
    - <<: *build
      env: IMAGE=reddiscord
    - <<: *build
      env: IMAGE=screeenly
    - <<: *build
      env: IMAGE=thelounge
    - <<: *build
      env: IMAGE=unbound
    - <<: *build
      env: IMAGE=yourls
    - <<: *build
      env: IMAGE=zeronet


    - stage: scan
      cache:
        directories:
          - $HOME/.cache/trivy
      install:
        - make trivy
        - ./trivy --refresh --quiet || ./trivy --reset
      script:
        - ./trivy --exit-code 0 --severity HIGH     --quiet supersandro2000/base-alpine:latest
        - ./trivy --exit-code 1 --severity CRITICAL --quiet supersandro2000/base-alpine:latest
        - ./trivy --exit-code 0 --severity HIGH     --quiet supersandro2000/code-server:latest
        - ./trivy --exit-code 1 --severity CRITICAL --quiet supersandro2000/code-server:latest

# notifications:
#   webhooks:
#     - https://app.fossa.io/hooks/travisci
